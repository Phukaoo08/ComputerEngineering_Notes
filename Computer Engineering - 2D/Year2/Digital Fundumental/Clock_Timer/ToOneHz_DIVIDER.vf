////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ToOneHz_DIVIDER.vf
// /___/   /\     Timestamp : 10/24/2020 23:02:05
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Computer Engineering/Year2/Digital Fundumental/Clock_Timer/ToOneHz_DIVIDER.vf" -w "D:/Computer Engineering/Year2/Digital Fundumental/Clock_Timer/ToOneHz_DIVIDER.sch"
//Design Name: ToOneHz_DIVIDER
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_ToOneHz_DIVIDER(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_ToOneHz_DIVIDER(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 1ns / 1ps

module ToOneHz_DIVIDER(OSC_20Hz, 
                       ClkDiv_Out);

    input OSC_20Hz;
   output ClkDiv_Out;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_16;
   wire XLXN_18;
   
   (* HU_SET = "XLXI_1_0" *) 
   CD4CE_HXILINX_ToOneHz_DIVIDER  XLXI_1 (.C(OSC_20Hz), 
                                         .CE(XLXN_18), 
                                         .CLR(XLXN_14), 
                                         .CEO(XLXN_2), 
                                         .Q0(), 
                                         .Q1(), 
                                         .Q2(), 
                                         .Q3(), 
                                         .TC(XLXN_8));
   (* HU_SET = "XLXI_2_1" *) 
   CD4CE_HXILINX_ToOneHz_DIVIDER  XLXI_2 (.C(XLXN_8), 
                                         .CE(XLXN_2), 
                                         .CLR(XLXN_14), 
                                         .CEO(XLXN_3), 
                                         .Q0(), 
                                         .Q1(), 
                                         .Q2(), 
                                         .Q3(), 
                                         .TC(XLXN_9));
   (* HU_SET = "XLXI_3_2" *) 
   CD4CE_HXILINX_ToOneHz_DIVIDER  XLXI_3 (.C(XLXN_9), 
                                         .CE(XLXN_3), 
                                         .CLR(XLXN_14), 
                                         .CEO(XLXN_4), 
                                         .Q0(), 
                                         .Q1(), 
                                         .Q2(), 
                                         .Q3(), 
                                         .TC(XLXN_10));
   (* HU_SET = "XLXI_4_3" *) 
   CD4CE_HXILINX_ToOneHz_DIVIDER  XLXI_4 (.C(XLXN_10), 
                                         .CE(XLXN_4), 
                                         .CLR(XLXN_14), 
                                         .CEO(XLXN_5), 
                                         .Q0(), 
                                         .Q1(), 
                                         .Q2(), 
                                         .Q3(), 
                                         .TC(XLXN_11));
   (* HU_SET = "XLXI_5_4" *) 
   CD4CE_HXILINX_ToOneHz_DIVIDER  XLXI_5 (.C(XLXN_11), 
                                         .CE(XLXN_5), 
                                         .CLR(XLXN_14), 
                                         .CEO(XLXN_6), 
                                         .Q0(), 
                                         .Q1(), 
                                         .Q2(), 
                                         .Q3(), 
                                         .TC(XLXN_12));
   (* HU_SET = "XLXI_6_5" *) 
   CD4CE_HXILINX_ToOneHz_DIVIDER  XLXI_6 (.C(XLXN_12), 
                                         .CE(XLXN_6), 
                                         .CLR(XLXN_14), 
                                         .CEO(XLXN_7), 
                                         .Q0(), 
                                         .Q1(), 
                                         .Q2(), 
                                         .Q3(), 
                                         .TC(XLXN_13));
   (* HU_SET = "XLXI_7_6" *) 
   CD4CE_HXILINX_ToOneHz_DIVIDER  XLXI_7 (.C(XLXN_13), 
                                         .CE(XLXN_7), 
                                         .CLR(XLXN_14), 
                                         .CEO(), 
                                         .Q0(), 
                                         .Q1(), 
                                         .Q2(), 
                                         .Q3(), 
                                         .TC(XLXN_16));
   VCC  XLXI_8 (.P(XLXN_18));
   (* HU_SET = "XLXI_9_7" *) 
   FJKC_HXILINX_ToOneHz_DIVIDER  XLXI_9 (.C(XLXN_16), 
                                        .CLR(XLXN_14), 
                                        .J(XLXN_18), 
                                        .K(XLXN_18), 
                                        .Q(ClkDiv_Out));
   GND  XLXI_10 (.G(XLXN_14));
endmodule
