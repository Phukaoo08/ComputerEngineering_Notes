////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Counter0_7.vf
// /___/   /\     Timestamp : 11/26/2020 15:02:31
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Computer Engineering/Year2/Digital Fundumental/Dice_Random_Digital/Counter0_7.vf" -w "D:/Computer Engineering/Year2/Digital Fundumental/Dice_Random_Digital/Counter0_7.sch"
//Design Name: Counter0_7
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4RE_HXILINX_Counter0_7(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1, Q0} <= {Q3, Q2, Q1, Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Counter0_7(CSC_DIV, 
                  Counter1_1, 
                  Counter1_2, 
                  Counter1_3, 
                  Counter1_4, 
                  Counter2_1, 
                  Counter2_2, 
                  Counter2_3, 
                  Counter2_4);

    input CSC_DIV;
   output Counter1_1;
   output Counter1_2;
   output Counter1_3;
   output Counter1_4;
   output Counter2_1;
   output Counter2_2;
   output Counter2_3;
   output Counter2_4;
   
   wire XLXN_2;
   wire XLXN_28;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_58;
   wire XLXN_72;
   wire XLXN_74;
   wire XLXN_77;
   wire XLXN_85;
   wire XLXN_86;
   wire XLXN_87;
   wire XLXN_101;
   wire XLXN_102;
   wire XLXN_103;
   wire XLXN_112;
   wire XLXN_113;
   wire XLXN_114;
   wire Counter1_1_DUMMY;
   wire Counter1_2_DUMMY;
   wire Counter1_3_DUMMY;
   wire Counter1_4_DUMMY;
   wire Counter2_1_DUMMY;
   wire Counter2_2_DUMMY;
   wire Counter2_3_DUMMY;
   wire Counter2_4_DUMMY;
   
   assign Counter1_1 = Counter1_1_DUMMY;
   assign Counter1_2 = Counter1_2_DUMMY;
   assign Counter1_3 = Counter1_3_DUMMY;
   assign Counter1_4 = Counter1_4_DUMMY;
   assign Counter2_1 = Counter2_1_DUMMY;
   assign Counter2_2 = Counter2_2_DUMMY;
   assign Counter2_3 = Counter2_3_DUMMY;
   assign Counter2_4 = Counter2_4_DUMMY;
   VCC  XLXI_1 (.P(XLXN_2));
   (* HU_SET = "XLXI_5_18" *) 
   CD4RE_HXILINX_Counter0_7  XLXI_5 (.C(CSC_DIV), 
                                    .CE(XLXN_2), 
                                    .R(XLXN_77), 
                                    .CEO(), 
                                    .Q0(Counter1_1_DUMMY), 
                                    .Q1(Counter1_2_DUMMY), 
                                    .Q2(Counter1_3_DUMMY), 
                                    .Q3(Counter1_4_DUMMY), 
                                    .TC(XLXN_28));
   (* HU_SET = "XLXI_6_19" *) 
   CD4RE_HXILINX_Counter0_7  XLXI_6 (.C(XLXN_28), 
                                    .CE(XLXN_2), 
                                    .R(XLXN_77), 
                                    .CEO(), 
                                    .Q0(Counter2_1_DUMMY), 
                                    .Q1(Counter2_2_DUMMY), 
                                    .Q2(Counter2_3_DUMMY), 
                                    .Q3(Counter2_4_DUMMY), 
                                    .TC());
   AND4  XLXI_17 (.I0(XLXN_48), 
                 .I1(XLXN_47), 
                 .I2(XLXN_46), 
                 .I3(Counter1_1_DUMMY), 
                 .O(XLXN_58));
   INV  XLXI_19 (.I(Counter1_2_DUMMY), 
                .O(XLXN_46));
   INV  XLXI_20 (.I(Counter1_3_DUMMY), 
                .O(XLXN_47));
   INV  XLXI_21 (.I(Counter1_4_DUMMY), 
                .O(XLXN_48));
   AND2  XLXI_25 (.I0(XLXN_112), 
                 .I1(XLXN_58), 
                 .O(XLXN_74));
   INV  XLXI_26 (.I(Counter2_1_DUMMY), 
                .O(XLXN_72));
   OR2  XLXI_27 (.I0(XLXN_112), 
                .I1(XLXN_74), 
                .O(XLXN_77));
   AND4  XLXI_29 (.I0(XLXN_101), 
                 .I1(XLXN_87), 
                 .I2(XLXN_86), 
                 .I3(Counter2_1_DUMMY), 
                 .O(XLXN_85));
   OR3  XLXI_30 (.I0(XLXN_114), 
                .I1(XLXN_85), 
                .I2(XLXN_113), 
                .O(XLXN_112));
   INV  XLXI_31 (.I(Counter2_2_DUMMY), 
                .O(XLXN_86));
   INV  XLXI_32 (.I(Counter2_3_DUMMY), 
                .O(XLXN_87));
   INV  XLXI_33 (.I(Counter2_4_DUMMY), 
                .O(XLXN_101));
   INV  XLXI_34 (.I(Counter2_2_DUMMY), 
                .O(XLXN_102));
   INV  XLXI_35 (.I(Counter2_3_DUMMY), 
                .O(XLXN_103));
   AND4  XLXI_37 (.I0(Counter2_4_DUMMY), 
                 .I1(Counter2_3_DUMMY), 
                 .I2(Counter2_2_DUMMY), 
                 .I3(XLXN_72), 
                 .O(XLXN_114));
   AND4  XLXI_38 (.I0(Counter2_4_DUMMY), 
                 .I1(XLXN_103), 
                 .I2(XLXN_102), 
                 .I3(Counter2_1_DUMMY), 
                 .O(XLXN_113));
endmodule
