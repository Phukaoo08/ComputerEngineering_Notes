////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : adder_8bits.vf
// /___/   /\     Timestamp : 10/29/2020 15:45:35
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Computer Engineering/Year2/Digital Fundumental/adder/adder/adder_8bits.vf" -w "D:/Computer Engineering/Year2/Digital Fundumental/adder/adder/adder_8bits.sch"
//Design Name: adder_8bits
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_adder_8bits (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_adder_8bits(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module ADD8_HXILINX_adder_8bits (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module NOR9_HXILINX_adder_8bits (O, I0, I1, I2, I3, I4, I5, I6, I7, I8);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;
   input I6;
   input I7;
   input I8;

assign O = !(I0 || I1 || I2 || I3 || I4 || I5 || I6 || I7 || I8 );

endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_adder_8bits (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_adder_8bits (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_adder_8bits(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module DividerBy2_MUSER_adder_8bits(CLR, 
                                    in_clk, 
                                    out_clk);

    input CLR;
    input in_clk;
   output out_clk;
   
   wire XLXN_3;
   
   (* HU_SET = "XLXI_1_18" *) 
   FTC_HXILINX_adder_8bits  XLXI_1 (.C(in_clk), 
                                   .CLR(CLR), 
                                   .T(XLXN_3), 
                                   .Q(out_clk));
   VCC  XLXI_2 (.P(XLXN_3));
endmodule
`timescale 1ns / 1ps

module Adder_MUSER_adder_8bits(data_inA, 
                               sum);

    input [15:0] data_inA;
   output [15:0] sum;
   
   wire XLXN_48;
   wire XLXN_52;
   
   GND  XLXI_24_0 (.G(sum[9]));
   GND  XLXI_24_1 (.G(sum[10]));
   GND  XLXI_24_2 (.G(sum[11]));
   GND  XLXI_24_3 (.G(sum[12]));
   GND  XLXI_24_4 (.G(sum[13]));
   GND  XLXI_24_5 (.G(sum[14]));
   GND  XLXI_24_6 (.G(sum[15]));
   (* HU_SET = "XLXI_27_19" *) 
   ADD8_HXILINX_adder_8bits  XLXI_27 (.A(data_inA[7:0]), 
                                     .B(data_inA[15:8]), 
                                     .CI(XLXN_48), 
                                     .CO(sum[8]), 
                                     .OFL(XLXN_52), 
                                     .S(sum[7:0]));
   GND  XLXI_28 (.G(XLXN_48));
   GND  XLXI_29 (.G(XLXN_52));
endmodule
`timescale 1ns / 1ps

module Comparator_MUSER_adder_8bits(data_inAdd, 
                                    To_Buzzer);

    input [15:0] data_inAdd;
   output To_Buzzer;
   
   wire [15:0] data_inAdd_DUMMY;
   
   assign data_inAdd_DUMMY[15:0] = data_inAdd[15:0];
   (* HU_SET = "XLXI_7_20" *) 
   NOR9_HXILINX_adder_8bits  XLXI_7 (.I0(data_inAdd_DUMMY[8]), 
                                    .I1(data_inAdd_DUMMY[7]), 
                                    .I2(data_inAdd_DUMMY[6]), 
                                    .I3(data_inAdd_DUMMY[5]), 
                                    .I4(data_inAdd_DUMMY[4]), 
                                    .I5(data_inAdd_DUMMY[3]), 
                                    .I6(data_inAdd_DUMMY[2]), 
                                    .I7(data_inAdd_DUMMY[1]), 
                                    .I8(data_inAdd_DUMMY[0]), 
                                    .O(To_Buzzer));
   GND  XLXI_8_0 (.G(data_inAdd_DUMMY[9]));
   GND  XLXI_8_1 (.G(data_inAdd_DUMMY[10]));
   GND  XLXI_8_2 (.G(data_inAdd_DUMMY[11]));
   GND  XLXI_8_3 (.G(data_inAdd_DUMMY[12]));
   GND  XLXI_8_4 (.G(data_inAdd_DUMMY[13]));
   GND  XLXI_8_5 (.G(data_inAdd_DUMMY[14]));
   GND  XLXI_8_6 (.G(data_inAdd_DUMMY[15]));
endmodule
`timescale 1ns / 1ps

module BCD_0_F_Decoder_MUSER_adder_8bits(Bit_0, 
                                         Bit_1, 
                                         Bit_2, 
                                         Bit_3, 
                                         A_7, 
                                         B_7, 
                                         C_7, 
                                         D_7, 
                                         E_7, 
                                         F_7, 
                                         G_7);

    input Bit_0;
    input Bit_1;
    input Bit_2;
    input Bit_3;
   output A_7;
   output B_7;
   output C_7;
   output D_7;
   output E_7;
   output F_7;
   output G_7;
   
   wire A;
   wire B;
   wire C;
   wire D0;
   wire D1;
   wire D2;
   wire D3;
   wire D4;
   wire D5;
   wire D6;
   wire D7;
   wire D8;
   wire D9;
   wire D10;
   wire D11;
   wire D12;
   wire D13;
   wire D14;
   wire D15;
   wire E;
   wire F;
   wire G;
   wire XLXN_37;
   wire XLXN_38;
   
   (* HU_SET = "XLXI_1_21" *) 
   D4_16E_HXILINX_adder_8bits  XLXI_1 (.A0(Bit_0), 
                                      .A1(Bit_1), 
                                      .A2(Bit_2), 
                                      .A3(Bit_3), 
                                      .E(XLXN_37), 
                                      .D0(D0), 
                                      .D1(D1), 
                                      .D2(D2), 
                                      .D3(D3), 
                                      .D4(D4), 
                                      .D5(D5), 
                                      .D6(D6), 
                                      .D7(D7), 
                                      .D8(D8), 
                                      .D9(D9), 
                                      .D10(D10), 
                                      .D11(D11), 
                                      .D12(D12), 
                                      .D13(D13), 
                                      .D14(D14), 
                                      .D15(D15));
   OR4  XLXI_25 (.I0(D12), 
                .I1(D7), 
                .I2(D1), 
                .I3(D0), 
                .O(G));
   OR5  XLXI_26 (.I0(D13), 
                .I1(D7), 
                .I2(D3), 
                .I3(D2), 
                .I4(D1), 
                .O(F));
   (* HU_SET = "XLXI_27_22" *) 
   OR6_HXILINX_adder_8bits  XLXI_27 (.I0(D9), 
                                    .I1(D7), 
                                    .I2(D5), 
                                    .I3(D4), 
                                    .I4(D3), 
                                    .I5(D1), 
                                    .O(E));
   OR4  XLXI_31 (.I0(D11), 
                .I1(D13), 
                .I2(D4), 
                .I3(D1), 
                .O(A));
   VCC  XLXI_32 (.P(XLXN_37));
   INV  XLXI_33 (.I(G), 
                .O(G_7));
   INV  XLXI_34 (.I(F), 
                .O(F_7));
   INV  XLXI_35 (.I(E), 
                .O(E_7));
   INV  XLXI_36 (.I(XLXN_38), 
                .O(D_7));
   INV  XLXI_37 (.I(C), 
                .O(C_7));
   INV  XLXI_38 (.I(B), 
                .O(B_7));
   INV  XLXI_39 (.I(A), 
                .O(A_7));
   OR5  XLXI_40 (.I0(D15), 
                .I1(D10), 
                .I2(D7), 
                .I3(D4), 
                .I4(D1), 
                .O(XLXN_38));
   OR4  XLXI_41 (.I0(D15), 
                .I1(D14), 
                .I2(D12), 
                .I3(D2), 
                .O(C));
   (* HU_SET = "XLXI_43_23" *) 
   OR6_HXILINX_adder_8bits  XLXI_43 (.I0(D15), 
                                    .I1(D14), 
                                    .I2(D12), 
                                    .I3(D11), 
                                    .I4(D6), 
                                    .I5(D5), 
                                    .O(B));
endmodule
`timescale 1ns / 1ps

module Mux16_MUSER_adder_8bits(clk_select, 
                               data, 
                               A, 
                               B, 
                               C, 
                               D);

    input clk_select;
    input [15:0] data;
   output A;
   output B;
   output C;
   output D;
   
   wire S0;
   wire S1;
   wire XLXN_1;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_113;
   wire XLXN_115;
   
   (* HU_SET = "XLXI_2_24" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_2 (.D0(data[0]), 
                                     .D1(data[4]), 
                                     .D2(data[8]), 
                                     .D3(data[12]), 
                                     .E(XLXN_1), 
                                     .S0(S0), 
                                     .S1(S1), 
                                     .O(A));
   VCC  XLXI_3 (.P(XLXN_1));
   (* HU_SET = "XLXI_8_25" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_8 (.D0(data[1]), 
                                     .D1(data[5]), 
                                     .D2(data[9]), 
                                     .D3(data[13]), 
                                     .E(XLXN_4), 
                                     .S0(S0), 
                                     .S1(S1), 
                                     .O(B));
   VCC  XLXI_9 (.P(XLXN_4));
   (* HU_SET = "XLXI_10_26" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_10 (.D0(data[2]), 
                                      .D1(data[6]), 
                                      .D2(data[10]), 
                                      .D3(data[14]), 
                                      .E(XLXN_5), 
                                      .S0(S0), 
                                      .S1(S1), 
                                      .O(C));
   VCC  XLXI_11 (.P(XLXN_5));
   (* HU_SET = "XLXI_12_27" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_12 (.D0(data[3]), 
                                      .D1(data[7]), 
                                      .D2(data[11]), 
                                      .D3(data[15]), 
                                      .E(XLXN_6), 
                                      .S0(S0), 
                                      .S1(S1), 
                                      .O(D));
   VCC  XLXI_13 (.P(XLXN_6));
   (* HU_SET = "XLXI_27_28" *) 
   CB2CE_HXILINX_adder_8bits  XLXI_27 (.C(clk_select), 
                                      .CE(XLXN_113), 
                                      .CLR(XLXN_115), 
                                      .CEO(), 
                                      .Q0(S0), 
                                      .Q1(S1), 
                                      .TC());
   VCC  XLXI_28 (.P(XLXN_113));
   GND  XLXI_29 (.G(XLXN_115));
endmodule
`timescale 1ns / 1ps

module selectCommon_MUSER_adder_8bits(clk_select, 
                                      com0, 
                                      com1, 
                                      com2, 
                                      com3);

    input clk_select;
   output com0;
   output com1;
   output com2;
   output com3;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_18;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   
   (* HU_SET = "XLXI_1_29" *) 
   CB2CE_HXILINX_adder_8bits  XLXI_1 (.C(clk_select), 
                                     .CE(XLXN_1), 
                                     .CLR(XLXN_2), 
                                     .CEO(), 
                                     .Q0(XLXN_4), 
                                     .Q1(XLXN_5), 
                                     .TC());
   VCC  XLXI_2 (.P(XLXN_1));
   GND  XLXI_3 (.G(XLXN_2));
   (* HU_SET = "XLXI_4_30" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_4 (.D0(XLXN_29), 
                                     .D1(XLXN_30), 
                                     .D2(XLXN_30), 
                                     .D3(XLXN_30), 
                                     .E(XLXN_6), 
                                     .S0(XLXN_4), 
                                     .S1(XLXN_5), 
                                     .O(com0));
   VCC  XLXI_5 (.P(XLXN_6));
   (* HU_SET = "XLXI_6_33" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_6 (.D0(XLXN_30), 
                                     .D1(XLXN_33), 
                                     .D2(XLXN_30), 
                                     .D3(XLXN_30), 
                                     .E(XLXN_18), 
                                     .S0(XLXN_4), 
                                     .S1(XLXN_5), 
                                     .O(com1));
   (* HU_SET = "XLXI_7_31" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_7 (.D0(XLXN_30), 
                                     .D1(XLXN_30), 
                                     .D2(XLXN_34), 
                                     .D3(XLXN_30), 
                                     .E(XLXN_27), 
                                     .S0(XLXN_4), 
                                     .S1(XLXN_5), 
                                     .O(com2));
   (* HU_SET = "XLXI_8_32" *) 
   M4_1E_HXILINX_adder_8bits  XLXI_8 (.D0(XLXN_30), 
                                     .D1(XLXN_30), 
                                     .D2(XLXN_30), 
                                     .D3(XLXN_35), 
                                     .E(XLXN_28), 
                                     .S0(XLXN_4), 
                                     .S1(XLXN_5), 
                                     .O(com3));
   VCC  XLXI_9 (.P(XLXN_18));
   VCC  XLXI_11 (.P(XLXN_27));
   VCC  XLXI_12 (.P(XLXN_28));
   VCC  XLXI_13 (.P(XLXN_30));
   GND  XLXI_14 (.G(XLXN_29));
   GND  XLXI_21 (.G(XLXN_33));
   GND  XLXI_22 (.G(XLXN_34));
   GND  XLXI_23 (.G(XLXN_35));
endmodule
`timescale 1ns / 1ps

module adder_8bits(clk20MHz, 
                   data_inAdd, 
                   A, 
                   B, 
                   Buzzer, 
                   C, 
                   com0, 
                   com1, 
                   com2, 
                   com3, 
                   D, 
                   E, 
                   F, 
                   G);

    input clk20MHz;
    input [15:0] data_inAdd;
   output A;
   output B;
   output Buzzer;
   output C;
   output com0;
   output com1;
   output com2;
   output com3;
   output D;
   output E;
   output F;
   output G;
   
   wire XLXN_2;
   wire XLXN_210;
   wire XLXN_211;
   wire XLXN_212;
   wire XLXN_213;
   wire [15:0] XLXN_215;
   wire XLXN_222;
   
   GND  XLXI_4 (.G(XLXN_2));
   selectCommon_MUSER_adder_8bits  XLXI_5 (.clk_select(XLXN_222), 
                                          .com0(com0), 
                                          .com1(com1), 
                                          .com2(com2), 
                                          .com3(com3));
   Mux16_MUSER_adder_8bits  XLXI_9 (.clk_select(XLXN_222), 
                                   .data(XLXN_215[15:0]), 
                                   .A(XLXN_210), 
                                   .B(XLXN_211), 
                                   .C(XLXN_212), 
                                   .D(XLXN_213));
   BCD_0_F_Decoder_MUSER_adder_8bits  XLXI_33 (.Bit_0(XLXN_210), 
                                              .Bit_1(XLXN_211), 
                                              .Bit_2(XLXN_212), 
                                              .Bit_3(XLXN_213), 
                                              .A_7(A), 
                                              .B_7(B), 
                                              .C_7(C), 
                                              .D_7(D), 
                                              .E_7(E), 
                                              .F_7(F), 
                                              .G_7(G));
   Comparator_MUSER_adder_8bits  XLXI_41 (.data_inAdd(XLXN_215[15:0]), 
                                         .To_Buzzer(Buzzer));
   Adder_MUSER_adder_8bits  XLXI_42 (.data_inA(data_inAdd[15:0]), 
                                    .sum(XLXN_215[15:0]));
   DividerBy2_MUSER_adder_8bits  XLXI_52 (.CLR(XLXN_2), 
                                         .in_clk(clk20MHz), 
                                         .out_clk(XLXN_222));
endmodule
