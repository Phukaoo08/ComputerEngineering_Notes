////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ALU.vf
// /___/   /\     Timestamp : 11/05/2020 13:28:17
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Computer Engineering/Year2/Digital Fundumental/ALU/ALU.vf" -w "D:/Computer Engineering/Year2/Digital Fundumental/ALU/ALU.sch"
//Design Name: ALU
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_ALU (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module INV8_HXILINX_ALU (O, I);
    

   output [7:0] O;

   input  [7:0] I;

assign O = ~I;
endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_ALU (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_ALU (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_ALU (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_ALU(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module avl_MUSER_ALU(A, 
                     adder_subtractor, 
                     B, 
                     out_put);

    input [7:0] A;
    input adder_subtractor;
    input [7:0] B;
   output [7:0] out_put;
   
   wire XLXN_3;
   
   (* HU_SET = "XLXI_5_25" *) 
   ADSU8_HXILINX_ALU  XLXI_5 (.A(A[7:0]), 
                             .ADD(adder_subtractor), 
                             .B(B[7:0]), 
                             .CI(XLXN_3), 
                             .CO(), 
                             .OFL(), 
                             .S(out_put[7:0]));
   INV  XLXI_6 (.I(adder_subtractor), 
               .O(XLXN_3));
endmodule
`timescale 1ns / 1ps

module shifter_8bit_MUSER_ALU(data_in, 
                              result);

    input [7:0] data_in;
   output [7:0] result;
   
   wire [7:0] out_put;
   
   (* HU_SET = "XLXI_1_26" *) 
   INV8_HXILINX_ALU  XLXI_1 (.I(data_in[7:0]), 
                            .O(out_put[7:0]));
   GND  XLXI_2 (.G(out_put[7]));
   INV  XLXI_3_0 (.I(out_put[0]), 
                 .O(result[1]));
   INV  XLXI_3_1 (.I(out_put[1]), 
                 .O(result[2]));
   INV  XLXI_3_2 (.I(out_put[2]), 
                 .O(result[3]));
   INV  XLXI_3_3 (.I(out_put[3]), 
                 .O(result[4]));
   INV  XLXI_3_4 (.I(out_put[4]), 
                 .O(result[5]));
   INV  XLXI_3_5 (.I(out_put[5]), 
                 .O(result[6]));
   INV  XLXI_3_6 (.I(out_put[6]), 
                 .O(result[7]));
   GND  XLXI_4 (.G(result[0]));
endmodule
`timescale 1ns / 1ps

module select_button_MUSER_ALU(Select_SW, 
                               D0, 
                               D1);

    input Select_SW;
   output D0;
   output D1;
   
   wire XLXN_8;
   wire XLXN_10;
   
   (* HU_SET = "XLXI_7_27" *) 
   CB2CE_HXILINX_ALU  XLXI_7 (.C(Select_SW), 
                             .CE(XLXN_10), 
                             .CLR(XLXN_8), 
                             .CEO(), 
                             .Q0(D0), 
                             .Q1(D1), 
                             .TC());
   GND  XLXI_8 (.G(XLXN_8));
   VCC  XLXI_9 (.P(XLXN_10));
endmodule
`timescale 1ns / 1ps

module select_application_MUSER_ALU(adder, 
                                    D0, 
                                    D1, 
                                    shifter, 
                                    sub, 
                                    xor_8bit, 
                                    out_put);

    input [7:0] adder;
    input D0;
    input D1;
    input [7:0] shifter;
    input [7:0] sub;
    input [7:0] xor_8bit;
   output [7:0] out_put;
   
   wire [3:0] XLXN_25;
   wire [3:0] XLXN_33;
   
   (* HU_SET = "XLXI_16_0_31" *) 
   M4_1E_HXILINX_ALU  XLXI_16_0 (.D0(adder[0]), 
                                .D1(sub[0]), 
                                .D2(xor_8bit[0]), 
                                .D3(shifter[0]), 
                                .E(XLXN_25[0]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[0]));
   (* HU_SET = "XLXI_16_1_30" *) 
   M4_1E_HXILINX_ALU  XLXI_16_1 (.D0(adder[1]), 
                                .D1(sub[1]), 
                                .D2(xor_8bit[1]), 
                                .D3(shifter[1]), 
                                .E(XLXN_25[1]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[1]));
   (* HU_SET = "XLXI_16_2_29" *) 
   M4_1E_HXILINX_ALU  XLXI_16_2 (.D0(adder[2]), 
                                .D1(sub[2]), 
                                .D2(xor_8bit[2]), 
                                .D3(shifter[2]), 
                                .E(XLXN_25[2]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[2]));
   (* HU_SET = "XLXI_16_3_28" *) 
   M4_1E_HXILINX_ALU  XLXI_16_3 (.D0(adder[3]), 
                                .D1(sub[3]), 
                                .D2(xor_8bit[3]), 
                                .D3(shifter[3]), 
                                .E(XLXN_25[3]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[3]));
   VCC  XLXI_17_0 (.P(XLXN_25[0]));
   VCC  XLXI_17_1 (.P(XLXN_25[1]));
   VCC  XLXI_17_2 (.P(XLXN_25[2]));
   VCC  XLXI_17_3 (.P(XLXN_25[3]));
   (* HU_SET = "XLXI_18_0_35" *) 
   M4_1E_HXILINX_ALU  XLXI_18_0 (.D0(adder[4]), 
                                .D1(sub[4]), 
                                .D2(xor_8bit[4]), 
                                .D3(shifter[4]), 
                                .E(XLXN_33[0]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[4]));
   (* HU_SET = "XLXI_18_1_34" *) 
   M4_1E_HXILINX_ALU  XLXI_18_1 (.D0(adder[5]), 
                                .D1(sub[5]), 
                                .D2(xor_8bit[5]), 
                                .D3(shifter[5]), 
                                .E(XLXN_33[1]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[5]));
   (* HU_SET = "XLXI_18_2_33" *) 
   M4_1E_HXILINX_ALU  XLXI_18_2 (.D0(adder[6]), 
                                .D1(sub[6]), 
                                .D2(xor_8bit[6]), 
                                .D3(shifter[6]), 
                                .E(XLXN_33[2]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[6]));
   (* HU_SET = "XLXI_18_3_32" *) 
   M4_1E_HXILINX_ALU  XLXI_18_3 (.D0(adder[7]), 
                                .D1(sub[7]), 
                                .D2(xor_8bit[7]), 
                                .D3(shifter[7]), 
                                .E(XLXN_33[3]), 
                                .S0(D0), 
                                .S1(D1), 
                                .O(out_put[7]));
   VCC  XLXI_19_0 (.P(XLXN_33[0]));
   VCC  XLXI_19_1 (.P(XLXN_33[1]));
   VCC  XLXI_19_2 (.P(XLXN_33[2]));
   VCC  XLXI_19_3 (.P(XLXN_33[3]));
endmodule
`timescale 1ns / 1ps

module Xor8bit_MUSER_ALU(A, 
                         B, 
                         out_put);

    input [7:0] A;
    input [7:0] B;
   output [7:0] out_put;
   
   
   XOR2  XLXI_3 (.I0(B[0]), 
                .I1(A[0]), 
                .O(out_put[0]));
   XOR2  XLXI_4 (.I0(B[1]), 
                .I1(A[1]), 
                .O(out_put[1]));
   XOR2  XLXI_5 (.I0(B[2]), 
                .I1(A[2]), 
                .O(out_put[2]));
   XOR2  XLXI_6 (.I0(B[3]), 
                .I1(A[3]), 
                .O(out_put[3]));
   XOR2  XLXI_7 (.I0(B[4]), 
                .I1(A[4]), 
                .O(out_put[4]));
   XOR2  XLXI_8 (.I0(B[5]), 
                .I1(A[5]), 
                .O(out_put[5]));
   XOR2  XLXI_9 (.I0(B[6]), 
                .I1(A[6]), 
                .O(out_put[6]));
   XOR2  XLXI_10 (.I0(B[7]), 
                 .I1(A[7]), 
                 .O(out_put[7]));
endmodule
`timescale 1ns / 1ps

module Mux16_MUSER_ALU(clk_select, 
                       data, 
                       A, 
                       B, 
                       C, 
                       D);

    input clk_select;
    input [15:0] data;
   output A;
   output B;
   output C;
   output D;
   
   wire S0;
   wire S1;
   wire XLXN_1;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_113;
   wire XLXN_115;
   
   (* HU_SET = "XLXI_2_36" *) 
   M4_1E_HXILINX_ALU  XLXI_2 (.D0(data[0]), 
                             .D1(data[4]), 
                             .D2(data[8]), 
                             .D3(data[12]), 
                             .E(XLXN_1), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(A));
   VCC  XLXI_3 (.P(XLXN_1));
   (* HU_SET = "XLXI_8_37" *) 
   M4_1E_HXILINX_ALU  XLXI_8 (.D0(data[1]), 
                             .D1(data[5]), 
                             .D2(data[9]), 
                             .D3(data[13]), 
                             .E(XLXN_4), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(B));
   VCC  XLXI_9 (.P(XLXN_4));
   (* HU_SET = "XLXI_10_38" *) 
   M4_1E_HXILINX_ALU  XLXI_10 (.D0(data[2]), 
                              .D1(data[6]), 
                              .D2(data[10]), 
                              .D3(data[14]), 
                              .E(XLXN_5), 
                              .S0(S0), 
                              .S1(S1), 
                              .O(C));
   VCC  XLXI_11 (.P(XLXN_5));
   (* HU_SET = "XLXI_12_39" *) 
   M4_1E_HXILINX_ALU  XLXI_12 (.D0(data[3]), 
                              .D1(data[7]), 
                              .D2(data[11]), 
                              .D3(data[15]), 
                              .E(XLXN_6), 
                              .S0(S0), 
                              .S1(S1), 
                              .O(D));
   VCC  XLXI_13 (.P(XLXN_6));
   (* HU_SET = "XLXI_27_40" *) 
   CB2CE_HXILINX_ALU  XLXI_27 (.C(clk_select), 
                              .CE(XLXN_113), 
                              .CLR(XLXN_115), 
                              .CEO(), 
                              .Q0(S0), 
                              .Q1(S1), 
                              .TC());
   VCC  XLXI_28 (.P(XLXN_113));
   GND  XLXI_29 (.G(XLXN_115));
endmodule
`timescale 1ns / 1ps

module selectCommon_MUSER_ALU(clk_select, 
                              com0, 
                              com1, 
                              com2, 
                              com3);

    input clk_select;
   output com0;
   output com1;
   output com2;
   output com3;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_18;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   
   (* HU_SET = "XLXI_1_41" *) 
   CB2CE_HXILINX_ALU  XLXI_1 (.C(clk_select), 
                             .CE(XLXN_1), 
                             .CLR(XLXN_2), 
                             .CEO(), 
                             .Q0(XLXN_4), 
                             .Q1(XLXN_5), 
                             .TC());
   VCC  XLXI_2 (.P(XLXN_1));
   GND  XLXI_3 (.G(XLXN_2));
   (* HU_SET = "XLXI_4_42" *) 
   M4_1E_HXILINX_ALU  XLXI_4 (.D0(XLXN_29), 
                             .D1(XLXN_30), 
                             .D2(XLXN_30), 
                             .D3(XLXN_30), 
                             .E(XLXN_6), 
                             .S0(XLXN_4), 
                             .S1(XLXN_5), 
                             .O(com0));
   VCC  XLXI_5 (.P(XLXN_6));
   (* HU_SET = "XLXI_6_45" *) 
   M4_1E_HXILINX_ALU  XLXI_6 (.D0(XLXN_30), 
                             .D1(XLXN_33), 
                             .D2(XLXN_30), 
                             .D3(XLXN_30), 
                             .E(XLXN_18), 
                             .S0(XLXN_4), 
                             .S1(XLXN_5), 
                             .O(com1));
   (* HU_SET = "XLXI_7_43" *) 
   M4_1E_HXILINX_ALU  XLXI_7 (.D0(XLXN_30), 
                             .D1(XLXN_30), 
                             .D2(XLXN_34), 
                             .D3(XLXN_30), 
                             .E(XLXN_27), 
                             .S0(XLXN_4), 
                             .S1(XLXN_5), 
                             .O(com2));
   (* HU_SET = "XLXI_8_44" *) 
   M4_1E_HXILINX_ALU  XLXI_8 (.D0(XLXN_30), 
                             .D1(XLXN_30), 
                             .D2(XLXN_30), 
                             .D3(XLXN_35), 
                             .E(XLXN_28), 
                             .S0(XLXN_4), 
                             .S1(XLXN_5), 
                             .O(com3));
   VCC  XLXI_9 (.P(XLXN_18));
   VCC  XLXI_11 (.P(XLXN_27));
   VCC  XLXI_12 (.P(XLXN_28));
   VCC  XLXI_13 (.P(XLXN_30));
   GND  XLXI_14 (.G(XLXN_29));
   GND  XLXI_21 (.G(XLXN_33));
   GND  XLXI_22 (.G(XLXN_34));
   GND  XLXI_23 (.G(XLXN_35));
endmodule
`timescale 1ns / 1ps

module BCD_0_F_Decoder_MUSER_ALU(Bit_0, 
                                 Bit_1, 
                                 Bit_2, 
                                 Bit_3, 
                                 A_7, 
                                 B_7, 
                                 C_7, 
                                 D_7, 
                                 E_7, 
                                 F_7, 
                                 G_7);

    input Bit_0;
    input Bit_1;
    input Bit_2;
    input Bit_3;
   output A_7;
   output B_7;
   output C_7;
   output D_7;
   output E_7;
   output F_7;
   output G_7;
   
   wire A;
   wire B;
   wire C;
   wire D0;
   wire D1;
   wire D2;
   wire D3;
   wire D4;
   wire D5;
   wire D6;
   wire D7;
   wire D8;
   wire D9;
   wire D10;
   wire D11;
   wire D12;
   wire D13;
   wire D14;
   wire D15;
   wire E;
   wire F;
   wire G;
   wire XLXN_37;
   wire XLXN_38;
   
   (* HU_SET = "XLXI_1_46" *) 
   D4_16E_HXILINX_ALU  XLXI_1 (.A0(Bit_0), 
                              .A1(Bit_1), 
                              .A2(Bit_2), 
                              .A3(Bit_3), 
                              .E(XLXN_37), 
                              .D0(D0), 
                              .D1(D1), 
                              .D2(D2), 
                              .D3(D3), 
                              .D4(D4), 
                              .D5(D5), 
                              .D6(D6), 
                              .D7(D7), 
                              .D8(D8), 
                              .D9(D9), 
                              .D10(D10), 
                              .D11(D11), 
                              .D12(D12), 
                              .D13(D13), 
                              .D14(D14), 
                              .D15(D15));
   OR4  XLXI_25 (.I0(D12), 
                .I1(D7), 
                .I2(D1), 
                .I3(D0), 
                .O(G));
   OR5  XLXI_26 (.I0(D13), 
                .I1(D7), 
                .I2(D3), 
                .I3(D2), 
                .I4(D1), 
                .O(F));
   (* HU_SET = "XLXI_27_47" *) 
   OR6_HXILINX_ALU  XLXI_27 (.I0(D9), 
                            .I1(D7), 
                            .I2(D5), 
                            .I3(D4), 
                            .I4(D3), 
                            .I5(D1), 
                            .O(E));
   OR4  XLXI_31 (.I0(D11), 
                .I1(D13), 
                .I2(D4), 
                .I3(D1), 
                .O(A));
   VCC  XLXI_32 (.P(XLXN_37));
   INV  XLXI_33 (.I(G), 
                .O(G_7));
   INV  XLXI_34 (.I(F), 
                .O(F_7));
   INV  XLXI_35 (.I(E), 
                .O(E_7));
   INV  XLXI_36 (.I(XLXN_38), 
                .O(D_7));
   INV  XLXI_37 (.I(C), 
                .O(C_7));
   INV  XLXI_38 (.I(B), 
                .O(B_7));
   INV  XLXI_39 (.I(A), 
                .O(A_7));
   OR5  XLXI_40 (.I0(D15), 
                .I1(D10), 
                .I2(D7), 
                .I3(D4), 
                .I4(D1), 
                .O(XLXN_38));
   OR4  XLXI_41 (.I0(D15), 
                .I1(D14), 
                .I2(D12), 
                .I3(D2), 
                .O(C));
   (* HU_SET = "XLXI_43_48" *) 
   OR6_HXILINX_ALU  XLXI_43 (.I0(D15), 
                            .I1(D14), 
                            .I2(D12), 
                            .I3(D11), 
                            .I4(D6), 
                            .I5(D5), 
                            .O(B));
endmodule
`timescale 1ns / 1ps

module ALU(A_in, 
           B_in, 
           clk20MHz, 
           Select_SW, 
           A, 
           B, 
           C, 
           com0, 
           com1, 
           com2, 
           com3, 
           D, 
           E, 
           F, 
           G);

    input [7:0] A_in;
    input [7:0] B_in;
    input clk20MHz;
   (* CLOCK_DEDICATED_ROUTE = "FALSE" *) 
    input Select_SW;
   output A;
   output B;
   output C;
   output com0;
   output com1;
   output com2;
   output com3;
   output D;
   output E;
   output F;
   output G;
   
   wire CLK_2MHZ;
   wire [15:0] data;
   wire XLXN_100;
   wire XLXN_101;
   wire XLXN_102;
   wire XLXN_103;
   wire [7:0] XLXN_120;
   wire [7:0] XLXN_121;
   wire XLXN_144;
   wire XLXN_148;
   wire XLXN_149;
   wire [7:0] XLXN_150;
   wire XLXN_157;
   
   GND  XLXI_4 (.G(XLXN_157));
   selectCommon_MUSER_ALU  XLXI_5 (.clk_select(CLK_2MHZ), 
                                  .com0(com0), 
                                  .com1(com1), 
                                  .com2(com2), 
                                  .com3(com3));
   Mux16_MUSER_ALU  XLXI_9 (.clk_select(CLK_2MHZ), 
                           .data(data[15:0]), 
                           .A(XLXN_100), 
                           .B(XLXN_101), 
                           .C(XLXN_102), 
                           .D(XLXN_103));
   BCD_0_F_Decoder_MUSER_ALU  XLXI_33 (.Bit_0(XLXN_100), 
                                      .Bit_1(XLXN_101), 
                                      .Bit_2(XLXN_102), 
                                      .Bit_3(XLXN_103), 
                                      .A_7(A), 
                                      .B_7(B), 
                                      .C_7(C), 
                                      .D_7(D), 
                                      .E_7(E), 
                                      .F_7(F), 
                                      .G_7(G));
   Xor8bit_MUSER_ALU  XLXI_46 (.A(A_in[7:0]), 
                              .B(B_in[7:0]), 
                              .out_put(XLXN_121[7:0]));
   select_application_MUSER_ALU  XLXI_47 (.adder(XLXN_120[7:0]), 
                                         .D0(XLXN_149), 
                                         .D1(XLXN_148), 
                                         .shifter(XLXN_150[7:0]), 
                                         .sub(XLXN_120[7:0]), 
                                         .xor_8bit(XLXN_121[7:0]), 
                                         .out_put(data[7:0]));
   select_button_MUSER_ALU  XLXI_48 (.Select_SW(Select_SW), 
                                    .D0(XLXN_149), 
                                    .D1(XLXN_148));
   shifter_8bit_MUSER_ALU  XLXI_53 (.data_in(A_in[7:0]), 
                                   .result(XLXN_150[7:0]));
   GND  XLXI_54_0 (.G(data[8]));
   GND  XLXI_54_1 (.G(data[9]));
   GND  XLXI_54_2 (.G(data[10]));
   GND  XLXI_54_3 (.G(data[11]));
   GND  XLXI_54_4 (.G(data[12]));
   GND  XLXI_54_5 (.G(data[13]));
   GND  XLXI_54_6 (.G(data[14]));
   GND  XLXI_54_7 (.G(data[15]));
   avl_MUSER_ALU  XLXI_56 (.A(A_in[7:0]), 
                          .adder_subtractor(XLXN_144), 
                          .B(B_in[7:0]), 
                          .out_put(XLXN_120[7:0]));
   AND2B2  XLXI_57 (.I0(XLXN_148), 
                   .I1(XLXN_149), 
                   .O(XLXN_144));
   DividerBy2  XLXI_58 (.CLR(XLXN_157), 
                       .in_clk(clk20MHz), 
                       .out_clk(CLK_2MHZ));
endmodule
